type: post
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: telegram-notification         # Name of the Kubernetes resource
spec:
  replicas: 3                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: telegram-notification      # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: telegram-notification 
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: telegram-notification
        image: katesclau/telegramsvc:${VERSION}
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: ${PORT}  # Should match the port number that the Go application listens on
        livenessProbe:              # To check the health of the Pod
          httpGet:
            path: /
            port: 8088
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 5
        resources:
          limits:
            memory: 512Mi
            cpu: "1"
          requests:
            memory: 256Mi
            cpu: "0.2"
type: post
---
kind: Service                    # Type of kubernetes resource
metadata:
  name: telegram-service   # Name of the resource
spec:
  type: NodePort                 # A port is opened on each node in your cluster via Kube proxy.
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
  - name: http
    port: ${PORT}
    targetPort: ${PORT}
  selector:
    app: telegram-notification         # Map any pod with label `app=go-hello-world` to this service